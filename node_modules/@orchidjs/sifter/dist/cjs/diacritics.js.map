{"version":3,"file":"diacritics.js","sources":["../../lib/diacritics.ts"],"sourcesContent":["\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport { escape_regex } from './utils.ts';\n\ntype TDiacraticList = {[key:string]:string};\n\n// https://github.com/andrewrk/node-diacritics/blob/master/index.js\n\nvar latin_pat:RegExp;\nconst accent_pat = '[\\u0300-\\u036F\\u{b7}\\u{2be}]'; // \\u{2bc}\nconst accent_reg = new RegExp(accent_pat,'gu');\nvar diacritic_patterns:TDiacraticList;\n\nconst latin_convert:TDiacraticList = {\n\t'æ': 'ae',\n\t'ⱥ': 'a',\n\t'ø': 'o',\n};\n\nconst convert_pat = new RegExp(Object.keys(latin_convert).join('|'),'gu');\n\nconst code_points:[[number,number]] = [[ 0, 65535 ]];\n\n/**\n * Remove accents\n * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n *\n */\nexport const asciifold = (str:string):string => {\n\treturn str\n\t\t.normalize('NFKD')\n\t\t.replace(accent_reg, '')\n\t\t.toLowerCase()\n\t\t.replace(convert_pat,function(foreignletter) {\n\t\t\treturn latin_convert[foreignletter] || foreignletter;\n\t\t});\n};\n\n/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n *\n */\nexport const arrayToPattern = (chars:string[],glue:string='|'):string =>{\n\n\tif( chars.length === 1 && chars[0] != undefined ){\n\t\treturn chars[0];\n\t}\n\n\tvar longest = 1;\n\tchars.forEach((a)=>{longest = Math.max(longest,a.length)});\n\n\tif( longest == 1 ){\n\t\treturn '['+chars.join('')+']';\n\t}\n\n\treturn '(?:'+chars.join(glue)+')';\n};\n\nexport const escapeToPattern = (chars:string[]):string =>{\n\tconst escaped = chars.map((diacritic) => escape_regex(diacritic));\n\treturn arrayToPattern(escaped);\n};\n\n/**\n * Get all possible combinations of substrings that add up to the given string\n * https://stackoverflow.com/questions/30169587/find-all-the-combination-of-substrings-that-add-up-to-the-given-string\n *\n */\nexport const allSubstrings = (input:string):string[][] => {\n\n    if( input.length === 1) return [[input]];\n\n    var result:string[][] = [];\n    allSubstrings(input.substring(1)).forEach(function(subresult) {\n        var tmp = subresult.slice(0);\n        tmp[0] = input.charAt(0) + tmp[0];\n        result.push(tmp);\n\n        tmp = subresult.slice(0);\n        tmp.unshift(input.charAt(0));\n        result.push(tmp);\n    });\n\n    return result;\n}\n\n/**\n * Generate a list of diacritics from the list of code points\n *\n */\nexport const generateDiacritics = (code_points:[[number,number]]):TDiacraticList => {\n\n\tvar diacritics:{[key:string]:string[]} = {};\n\tcode_points.forEach((code_range)=>{\n\n\t\tfor(let i = code_range[0]; i <= code_range[1]; i++){\n\n\t\t\tlet diacritic\t= String.fromCharCode(i);\n\t\t\tlet\tlatin\t\t= asciifold(diacritic);\n\n\t\t\tif( latin == diacritic.toLowerCase() ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// skip when latin is a string longer than 3 characters long\n\t\t\t// bc the resulting regex patterns will be long\n\t\t\t// eg:\n\t\t\t// latin صلى الله عليه وسلم length 18 code point 65018\n\t\t\t// latin جل جلاله length 8 code point 65019\n\t\t\tif( latin.length > 3 ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst latin_diacritics:string[] = diacritics[latin] || [latin];\n\t\t\tconst patt = new RegExp( escapeToPattern(latin_diacritics),'iu');\n\t\t\tif( diacritic.match(patt) ){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlatin_diacritics.push(diacritic);\n\t\t\tdiacritics[latin] = latin_diacritics;\n\t\t}\n\t});\n\n\t// filter out if there's only one character in the list\n\t// todo: this may not be needed\n\tObject.keys(diacritics).forEach(latin => {\n\t\tconst latin_diacritics = diacritics[latin] || [];\n\t\tif( latin_diacritics.length < 2 ){\n\t\t\tdelete diacritics[latin];\n\t\t}\n\t});\n\n\n\t// latin character pattern\n\t// match longer substrings first\n\tlet latin_chars\t= Object.keys(diacritics).sort((a, b) => b.length - a.length );\n\tlatin_pat\t\t= new RegExp('('+ escapeToPattern(latin_chars) + accent_pat + '*)','gu');\n\n\n\t// build diacritic patterns\n\t// ae needs:\n\t//\t(?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))\n\tvar diacritic_patterns:TDiacraticList = {};\n\tlatin_chars.sort((a,b) => a.length -b.length).forEach((latin)=>{\n\n\t\tvar substrings\t= allSubstrings(latin);\n\t\tvar pattern = substrings.map((sub_pat)=>{\n\n\t\t\tsub_pat = sub_pat.map((l)=>{\n\t\t\t\tif( diacritics.hasOwnProperty(l) ){\n\t\t\t\t\treturn escapeToPattern(diacritics[l]!);\n\t\t\t\t}\n\t\t\t\treturn l;\n\t\t\t});\n\n\t\t\treturn arrayToPattern(sub_pat,'');\n\t\t});\n\n\t\tdiacritic_patterns[latin] = arrayToPattern(pattern);\n\t});\n\n\n\treturn diacritic_patterns;\n}\n\n/**\n * Expand a regular expression pattern to include diacritics\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n */\nexport const diacriticRegexPoints = (regex:string):string => {\n\n\tif( diacritic_patterns === undefined ){\n\t\tdiacritic_patterns = generateDiacritics(code_points);\n\t}\n\n\tconst decomposed\t\t= regex.normalize('NFKD').toLowerCase();\n\n\treturn decomposed.split(latin_pat).map((part:string)=>{\n\n\t\t// \"ﬄ\" or \"ffl\"\n\t\tconst no_accent = asciifold(part);\n\t\tif( no_accent == '' ){\n\t\t\treturn '';\n\t\t}\n\n\t\tif( diacritic_patterns.hasOwnProperty(no_accent) ){\n\t\t\treturn diacritic_patterns[no_accent];\n\t\t}\n\n\t\treturn part;\n\t}).join('');\n\n}\n"],"names":["latin_pat","accent_pat","accent_reg","RegExp","diacritic_patterns","latin_convert","convert_pat","Object","keys","join","code_points","asciifold","str","normalize","replace","toLowerCase","foreignletter","arrayToPattern","chars","glue","length","undefined","longest","forEach","a","Math","max","escapeToPattern","escaped","map","diacritic","escape_regex","allSubstrings","input","result","substring","subresult","tmp","slice","charAt","push","unshift","generateDiacritics","diacritics","code_range","i","String","fromCharCode","latin","latin_diacritics","patt","match","latin_chars","sort","b","substrings","pattern","sub_pat","l","hasOwnProperty","diacriticRegexPoints","regex","decomposed","split","part","no_accent"],"mappings":";;;;;;;AACA;AAKA;AAEA,IAAIA,SAAJ;AACA,MAAMC,UAAU,GAAG,8BAAnB;;AACA,MAAMC,UAAU,GAAG,IAAIC,MAAJ,CAAWF,UAAX,EAAsB,IAAtB,CAAnB;AACA,IAAIG,kBAAJ;AAEA,MAAMC,aAA4B,GAAG;AACpC,OAAK,IAD+B;AAEpC,OAAK,GAF+B;AAGpC,OAAK;AAH+B,CAArC;AAMA,MAAMC,WAAW,GAAG,IAAIH,MAAJ,CAAWI,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,IAA3B,CAAgC,GAAhC,CAAX,EAAgD,IAAhD,CAApB;AAEA,MAAMC,WAA6B,GAAG,CAAC,CAAE,CAAF,EAAK,KAAL,CAAD,CAAtC;AAEA;AACA;AACA;AACA;AACA;;MACaC,SAAS,GAAIC,GAAD,IAAuB;AAC/C,SAAOA,GAAG,CACRC,SADK,CACK,MADL,EAELC,OAFK,CAEGZ,UAFH,EAEe,EAFf,EAGLa,WAHK,GAILD,OAJK,CAIGR,WAJH,EAIe,UAASU,aAAT,EAAwB;AAC5C,WAAOX,aAAa,CAACW,aAAD,CAAb,IAAgCA,aAAvC;AACA,GANK,CAAP;AAOA;AAED;AACA;AACA;AACA;AACA;AACA;;MACaC,cAAc,GAAG,CAACC,KAAD,EAAgBC,IAAW,GAAC,GAA5B,KAA0C;AAEvE,MAAID,KAAK,CAACE,MAAN,KAAiB,CAAjB,IAAsBF,KAAK,CAAC,CAAD,CAAL,IAAYG,SAAtC,EAAiD;AAChD,WAAOH,KAAK,CAAC,CAAD,CAAZ;AACA;;AAED,MAAII,OAAO,GAAG,CAAd;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAeC,CAAD,IAAK;AAACF,IAAAA,OAAO,GAAGG,IAAI,CAACC,GAAL,CAASJ,OAAT,EAAiBE,CAAC,CAACJ,MAAnB,CAAV;AAAqC,GAAzD;;AAEA,MAAIE,OAAO,IAAI,CAAf,EAAkB;AACjB,WAAO,MAAIJ,KAAK,CAACT,IAAN,CAAW,EAAX,CAAJ,GAAmB,GAA1B;AACA;;AAED,SAAO,QAAMS,KAAK,CAACT,IAAN,CAAWU,IAAX,CAAN,GAAuB,GAA9B;AACA;MAEYQ,eAAe,GAAIT,KAAD,IAA0B;AACxD,QAAMU,OAAO,GAAGV,KAAK,CAACW,GAAN,CAAWC,SAAD,IAAeC,kBAAY,CAACD,SAAD,CAArC,CAAhB;AACA,SAAOb,cAAc,CAACW,OAAD,CAArB;AACA;AAED;AACA;AACA;AACA;AACA;;MACaI,aAAa,GAAIC,KAAD,IAA6B;AAEtD,MAAIA,KAAK,CAACb,MAAN,KAAiB,CAArB,EAAwB,OAAO,CAAC,CAACa,KAAD,CAAD,CAAP;AAExB,MAAIC,MAAiB,GAAG,EAAxB;AACAF,EAAAA,aAAa,CAACC,KAAK,CAACE,SAAN,CAAgB,CAAhB,CAAD,CAAb,CAAkCZ,OAAlC,CAA0C,UAASa,SAAT,EAAoB;AAC1D,QAAIC,GAAG,GAAGD,SAAS,CAACE,KAAV,CAAgB,CAAhB,CAAV;AACAD,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASJ,KAAK,CAACM,MAAN,CAAa,CAAb,IAAkBF,GAAG,CAAC,CAAD,CAA9B;AACAH,IAAAA,MAAM,CAACM,IAAP,CAAYH,GAAZ;AAEAA,IAAAA,GAAG,GAAGD,SAAS,CAACE,KAAV,CAAgB,CAAhB,CAAN;AACAD,IAAAA,GAAG,CAACI,OAAJ,CAAYR,KAAK,CAACM,MAAN,CAAa,CAAb,CAAZ;AACAL,IAAAA,MAAM,CAACM,IAAP,CAAYH,GAAZ;AACH,GARD;AAUA,SAAOH,MAAP;AACH;AAED;AACA;AACA;AACA;;MACaQ,kBAAkB,GAAIhC,WAAD,IAAkD;AAEnF,MAAIiC,UAAkC,GAAG,EAAzC;AACAjC,EAAAA,WAAW,CAACa,OAAZ,CAAqBqB,UAAD,IAAc;AAEjC,SAAI,IAAIC,CAAC,GAAGD,UAAU,CAAC,CAAD,CAAtB,EAA2BC,CAAC,IAAID,UAAU,CAAC,CAAD,CAA1C,EAA+CC,CAAC,EAAhD,EAAmD;AAElD,UAAIf,SAAS,GAAGgB,MAAM,CAACC,YAAP,CAAoBF,CAApB,CAAhB;AACA,UAAIG,KAAK,GAAIrC,SAAS,CAACmB,SAAD,CAAtB;;AAEA,UAAIkB,KAAK,IAAIlB,SAAS,CAACf,WAAV,EAAb,EAAsC;AACrC;AACA,OAPiD;AAUlD;AACA;AACA;AACA;;;AACA,UAAIiC,KAAK,CAAC5B,MAAN,GAAe,CAAnB,EAAsB;AACrB;AACA;;AAED,YAAM6B,gBAAyB,GAAGN,UAAU,CAACK,KAAD,CAAV,IAAqB,CAACA,KAAD,CAAvD;AACA,YAAME,IAAI,GAAG,IAAI/C,MAAJ,CAAYwB,eAAe,CAACsB,gBAAD,CAA3B,EAA8C,IAA9C,CAAb;;AACA,UAAInB,SAAS,CAACqB,KAAV,CAAgBD,IAAhB,CAAJ,EAA2B;AAC1B;AACA;;AACDD,MAAAA,gBAAgB,CAACT,IAAjB,CAAsBV,SAAtB;AACAa,MAAAA,UAAU,CAACK,KAAD,CAAV,GAAoBC,gBAApB;AACA;AACD,GA5BD,EAHmF;AAkCnF;;AACA1C,EAAAA,MAAM,CAACC,IAAP,CAAYmC,UAAZ,EAAwBpB,OAAxB,CAAgCyB,KAAK,IAAI;AACxC,UAAMC,gBAAgB,GAAGN,UAAU,CAACK,KAAD,CAAV,IAAqB,EAA9C;;AACA,QAAIC,gBAAgB,CAAC7B,MAAjB,GAA0B,CAA9B,EAAiC;AAChC,aAAOuB,UAAU,CAACK,KAAD,CAAjB;AACA;AACD,GALD,EAnCmF;AA4CnF;;AACA,MAAII,WAAW,GAAG7C,MAAM,CAACC,IAAP,CAAYmC,UAAZ,EAAwBU,IAAxB,CAA6B,CAAC7B,CAAD,EAAI8B,CAAJ,KAAUA,CAAC,CAAClC,MAAF,GAAWI,CAAC,CAACJ,MAApD,CAAlB;AACApB,EAAAA,SAAS,GAAI,IAAIG,MAAJ,CAAW,MAAKwB,eAAe,CAACyB,WAAD,CAApB,GAAoCnD,UAApC,GAAiD,IAA5D,EAAiE,IAAjE,CAAb,CA9CmF;AAkDnF;AACA;;AACA,MAAIG,kBAAiC,GAAG,EAAxC;AACAgD,EAAAA,WAAW,CAACC,IAAZ,CAAiB,CAAC7B,CAAD,EAAG8B,CAAH,KAAS9B,CAAC,CAACJ,MAAF,GAAUkC,CAAC,CAAClC,MAAtC,EAA8CG,OAA9C,CAAuDyB,KAAD,IAAS;AAE9D,QAAIO,UAAU,GAAGvB,aAAa,CAACgB,KAAD,CAA9B;AACA,QAAIQ,OAAO,GAAGD,UAAU,CAAC1B,GAAX,CAAgB4B,OAAD,IAAW;AAEvCA,MAAAA,OAAO,GAAGA,OAAO,CAAC5B,GAAR,CAAa6B,CAAD,IAAK;AAC1B,YAAIf,UAAU,CAACgB,cAAX,CAA0BD,CAA1B,CAAJ,EAAkC;AACjC,iBAAO/B,eAAe,CAACgB,UAAU,CAACe,CAAD,CAAX,CAAtB;AACA;;AACD,eAAOA,CAAP;AACA,OALS,CAAV;AAOA,aAAOzC,cAAc,CAACwC,OAAD,EAAS,EAAT,CAArB;AACA,KAVa,CAAd;AAYArD,IAAAA,kBAAkB,CAAC4C,KAAD,CAAlB,GAA4B/B,cAAc,CAACuC,OAAD,CAA1C;AACA,GAhBD;AAmBA,SAAOpD,kBAAP;AACA;AAED;AACA;AACA;AACA;AACA;;MACawD,oBAAoB,GAAIC,KAAD,IAAyB;AAE5D,MAAIzD,kBAAkB,KAAKiB,SAA3B,EAAsC;AACrCjB,IAAAA,kBAAkB,GAAGsC,kBAAkB,CAAChC,WAAD,CAAvC;AACA;;AAED,QAAMoD,UAAU,GAAID,KAAK,CAAChD,SAAN,CAAgB,MAAhB,EAAwBE,WAAxB,EAApB;AAEA,SAAO+C,UAAU,CAACC,KAAX,CAAiB/D,SAAjB,EAA4B6B,GAA5B,CAAiCmC,IAAD,IAAe;AAErD;AACA,UAAMC,SAAS,GAAGtD,SAAS,CAACqD,IAAD,CAA3B;;AACA,QAAIC,SAAS,IAAI,EAAjB,EAAqB;AACpB,aAAO,EAAP;AACA;;AAED,QAAI7D,kBAAkB,CAACuD,cAAnB,CAAkCM,SAAlC,CAAJ,EAAkD;AACjD,aAAO7D,kBAAkB,CAAC6D,SAAD,CAAzB;AACA;;AAED,WAAOD,IAAP;AACA,GAbM,EAaJvD,IAbI,CAaC,EAbD,CAAP;AAeA;;;;;;;;;"}